// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	demouser "douyin/kitex_gen/demouser"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*demouser.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister":    kitex.NewMethodInfo(userRegisterHandler, newUserServiceUserRegisterArgs, newUserServiceUserRegisterResult, false),
		"UserLogin":       kitex.NewMethodInfo(userLoginHandler, newUserServiceUserLoginArgs, newUserServiceUserLoginResult, false),
		"CheckUserToken":  kitex.NewMethodInfo(checkUserTokenHandler, newUserServiceCheckUserTokenArgs, newUserServiceCheckUserTokenResult, false),
		"GetUserInfo":     kitex.NewMethodInfo(getUserInfoHandler, newUserServiceGetUserInfoArgs, newUserServiceGetUserInfoResult, false),
		"PublishAction":   kitex.NewMethodInfo(publishActionHandler, newUserServicePublishActionArgs, newUserServicePublishActionResult, false),
		"GetPublishList":  kitex.NewMethodInfo(getPublishListHandler, newUserServiceGetPublishListArgs, newUserServiceGetPublishListResult, false),
		"GetFavoriteList": kitex.NewMethodInfo(getFavoriteListHandler, newUserServiceGetFavoriteListArgs, newUserServiceGetFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "demouser",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServiceUserRegisterArgs)
	realResult := result.(*demouser.UserServiceUserRegisterResult)
	success, err := handler.(demouser.UserService).UserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserRegisterArgs() interface{} {
	return demouser.NewUserServiceUserRegisterArgs()
}

func newUserServiceUserRegisterResult() interface{} {
	return demouser.NewUserServiceUserRegisterResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServiceUserLoginArgs)
	realResult := result.(*demouser.UserServiceUserLoginResult)
	success, err := handler.(demouser.UserService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserLoginArgs() interface{} {
	return demouser.NewUserServiceUserLoginArgs()
}

func newUserServiceUserLoginResult() interface{} {
	return demouser.NewUserServiceUserLoginResult()
}

func checkUserTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServiceCheckUserTokenArgs)
	realResult := result.(*demouser.UserServiceCheckUserTokenResult)
	success, err := handler.(demouser.UserService).CheckUserToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserTokenArgs() interface{} {
	return demouser.NewUserServiceCheckUserTokenArgs()
}

func newUserServiceCheckUserTokenResult() interface{} {
	return demouser.NewUserServiceCheckUserTokenResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServiceGetUserInfoArgs)
	realResult := result.(*demouser.UserServiceGetUserInfoResult)
	success, err := handler.(demouser.UserService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserInfoArgs() interface{} {
	return demouser.NewUserServiceGetUserInfoArgs()
}

func newUserServiceGetUserInfoResult() interface{} {
	return demouser.NewUserServiceGetUserInfoResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServicePublishActionArgs)
	realResult := result.(*demouser.UserServicePublishActionResult)
	success, err := handler.(demouser.UserService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServicePublishActionArgs() interface{} {
	return demouser.NewUserServicePublishActionArgs()
}

func newUserServicePublishActionResult() interface{} {
	return demouser.NewUserServicePublishActionResult()
}

func getPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServiceGetPublishListArgs)
	realResult := result.(*demouser.UserServiceGetPublishListResult)
	success, err := handler.(demouser.UserService).GetPublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetPublishListArgs() interface{} {
	return demouser.NewUserServiceGetPublishListArgs()
}

func newUserServiceGetPublishListResult() interface{} {
	return demouser.NewUserServiceGetPublishListResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demouser.UserServiceGetFavoriteListArgs)
	realResult := result.(*demouser.UserServiceGetFavoriteListResult)
	success, err := handler.(demouser.UserService).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetFavoriteListArgs() interface{} {
	return demouser.NewUserServiceGetFavoriteListArgs()
}

func newUserServiceGetFavoriteListResult() interface{} {
	return demouser.NewUserServiceGetFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, req *demouser.DouyinUserRegisterRequest) (r *demouser.DouyinUserRegisterResponse, err error) {
	var _args demouser.UserServiceUserRegisterArgs
	_args.Req = req
	var _result demouser.UserServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *demouser.DouyinUserLoginRequest) (r *demouser.DouyinUserLoginResponse, err error) {
	var _args demouser.UserServiceUserLoginArgs
	_args.Req = req
	var _result demouser.UserServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUserToken(ctx context.Context, req *demouser.DouyinUserCheckRequest) (r *demouser.DouyinUserCheckResponse, err error) {
	var _args demouser.UserServiceCheckUserTokenArgs
	_args.Req = req
	var _result demouser.UserServiceCheckUserTokenResult
	if err = p.c.Call(ctx, "CheckUserToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *demouser.DouyinUserRequest) (r *demouser.DouyinUserResponse, err error) {
	var _args demouser.UserServiceGetUserInfoArgs
	_args.Req = req
	var _result demouser.UserServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *demouser.DouyinPublishActionRequest) (r *demouser.DouyinPublishActionResponse, err error) {
	var _args demouser.UserServicePublishActionArgs
	_args.Req = req
	var _result demouser.UserServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishList(ctx context.Context, req *demouser.DouyinPublishListRequest) (r *demouser.DouyinPublishListResponse, err error) {
	var _args demouser.UserServiceGetPublishListArgs
	_args.Req = req
	var _result demouser.UserServiceGetPublishListResult
	if err = p.c.Call(ctx, "GetPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *demouser.DouyinFavoriteListRequest) (r *demouser.DouyinFavoriteListResponse, err error) {
	var _args demouser.UserServiceGetFavoriteListArgs
	_args.Req = req
	var _result demouser.UserServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
