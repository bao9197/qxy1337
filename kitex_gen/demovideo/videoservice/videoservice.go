// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	demovideo "douyin/kitex_gen/demovideo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*demovideo.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeedList":    kitex.NewMethodInfo(getFeedListHandler, newVideoServiceGetFeedListArgs, newVideoServiceGetFeedListResult, false),
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newVideoServiceFavoriteActionArgs, newVideoServiceFavoriteActionResult, false),
		"CommentAction":  kitex.NewMethodInfo(commentActionHandler, newVideoServiceCommentActionArgs, newVideoServiceCommentActionResult, false),
		"GetCommentList": kitex.NewMethodInfo(getCommentListHandler, newVideoServiceGetCommentListArgs, newVideoServiceGetCommentListResult, false),
		"CreateVideo":    kitex.NewMethodInfo(createVideoHandler, newVideoServiceCreateVideoArgs, newVideoServiceCreateVideoResult, false),
		"MutilGetVideo":  kitex.NewMethodInfo(mutilGetVideoHandler, newVideoServiceMutilGetVideoArgs, newVideoServiceMutilGetVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "demovideo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demovideo.VideoServiceGetFeedListArgs)
	realResult := result.(*demovideo.VideoServiceGetFeedListResult)
	success, err := handler.(demovideo.VideoService).GetFeedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFeedListArgs() interface{} {
	return demovideo.NewVideoServiceGetFeedListArgs()
}

func newVideoServiceGetFeedListResult() interface{} {
	return demovideo.NewVideoServiceGetFeedListResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demovideo.VideoServiceFavoriteActionArgs)
	realResult := result.(*demovideo.VideoServiceFavoriteActionResult)
	success, err := handler.(demovideo.VideoService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteActionArgs() interface{} {
	return demovideo.NewVideoServiceFavoriteActionArgs()
}

func newVideoServiceFavoriteActionResult() interface{} {
	return demovideo.NewVideoServiceFavoriteActionResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demovideo.VideoServiceCommentActionArgs)
	realResult := result.(*demovideo.VideoServiceCommentActionResult)
	success, err := handler.(demovideo.VideoService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCommentActionArgs() interface{} {
	return demovideo.NewVideoServiceCommentActionArgs()
}

func newVideoServiceCommentActionResult() interface{} {
	return demovideo.NewVideoServiceCommentActionResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demovideo.VideoServiceGetCommentListArgs)
	realResult := result.(*demovideo.VideoServiceGetCommentListResult)
	success, err := handler.(demovideo.VideoService).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetCommentListArgs() interface{} {
	return demovideo.NewVideoServiceGetCommentListArgs()
}

func newVideoServiceGetCommentListResult() interface{} {
	return demovideo.NewVideoServiceGetCommentListResult()
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demovideo.VideoServiceCreateVideoArgs)
	realResult := result.(*demovideo.VideoServiceCreateVideoResult)
	success, err := handler.(demovideo.VideoService).CreateVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoArgs() interface{} {
	return demovideo.NewVideoServiceCreateVideoArgs()
}

func newVideoServiceCreateVideoResult() interface{} {
	return demovideo.NewVideoServiceCreateVideoResult()
}

func mutilGetVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demovideo.VideoServiceMutilGetVideoArgs)
	realResult := result.(*demovideo.VideoServiceMutilGetVideoResult)
	success, err := handler.(demovideo.VideoService).MutilGetVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceMutilGetVideoArgs() interface{} {
	return demovideo.NewVideoServiceMutilGetVideoArgs()
}

func newVideoServiceMutilGetVideoResult() interface{} {
	return demovideo.NewVideoServiceMutilGetVideoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeedList(ctx context.Context, req *demovideo.DouyinFeedRequest) (r *demovideo.DouyinFeedResponse, err error) {
	var _args demovideo.VideoServiceGetFeedListArgs
	_args.Req = req
	var _result demovideo.VideoServiceGetFeedListResult
	if err = p.c.Call(ctx, "GetFeedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *demovideo.DouyinFavoriteActionRequest) (r *demovideo.DouyinFavoriteActionResponse, err error) {
	var _args demovideo.VideoServiceFavoriteActionArgs
	_args.Req = req
	var _result demovideo.VideoServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *demovideo.DouyinCommentActionRequest) (r *demovideo.DouyinCommentActionResponse, err error) {
	var _args demovideo.VideoServiceCommentActionArgs
	_args.Req = req
	var _result demovideo.VideoServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *demovideo.DouyinCommentListRequest) (r *demovideo.DouyinCommentListResponse, err error) {
	var _args demovideo.VideoServiceGetCommentListArgs
	_args.Req = req
	var _result demovideo.VideoServiceGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateVideo(ctx context.Context, req *demovideo.DouyinCreateVideoRequest) (r *demovideo.DouyinCreateVideoResponse, err error) {
	var _args demovideo.VideoServiceCreateVideoArgs
	_args.Req = req
	var _result demovideo.VideoServiceCreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MutilGetVideo(ctx context.Context, req *demovideo.DouyinQueryVideoResponse) (r *demovideo.DouyinQueryVideoResponse, err error) {
	var _args demovideo.VideoServiceMutilGetVideoArgs
	_args.Req = req
	var _result demovideo.VideoServiceMutilGetVideoResult
	if err = p.c.Call(ctx, "MutilGetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
